/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package com.coffeesys.ui;

import com.coffeesys.dao.DonHangDAO;
import com.coffeesys.dao.ThongKeDAO;
import com.coffeesys.utils.MsgBox;
import com.coffeesys.utils.XImage;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.table.DefaultTableModel;
import org.apache.poi.ss.usermodel.BorderStyle;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Color;
import org.apache.poi.ss.usermodel.FillPatternType;
import org.apache.poi.ss.usermodel.HorizontalAlignment;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.util.CellRangeAddress;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFColor;
import org.apache.poi.xssf.usermodel.XSSFFont;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

/**
 *
 * @author Admin
 */
public class ThongKeJDialog extends javax.swing.JDialog {

    DonHangDAO dhDAO = new DonHangDAO();
    ThongKeDAO tkDAO = new ThongKeDAO();

    /**
     * Creates new form ThongKeJDialog
     */
    public ThongKeJDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        init();
    }

    public void init() {
        setIconImage(XImage.getAppIcon());
        setLocationRelativeTo(null);
        setTitle("BÁO CÁO THÔNG KÊ");

        fillComboBoxNam();
        fillComboBoxThang();
        fillComboBoxNgay();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        tabs = new javax.swing.JTabbedPane();
        pnlDoanhThu = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblDoanhThu = new javax.swing.JTable();
        lblTongDoanhThu = new javax.swing.JLabel();
        btnInTKDoanhThu = new javax.swing.JButton();
        pnlSanPham = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblSanPham = new javax.swing.JTable();
        btnBanChay = new javax.swing.JButton();
        btnBanCham = new javax.swing.JButton();
        btnInTKSanPham = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        cboNgay = new javax.swing.JComboBox<>();
        jPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        cboThang = new javax.swing.JComboBox<>();
        jPanel4 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        cboNam = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("BÁO CÁO THỐNG KÊ");

        tblDoanhThu.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Ngay", "Thang", "Nam", "SoLuongHoaDon", "DoanhThu"
            }
        ));
        jScrollPane1.setViewportView(tblDoanhThu);
        if (tblDoanhThu.getColumnModel().getColumnCount() > 0) {
            tblDoanhThu.getColumnModel().getColumn(0).setPreferredWidth(100);
            tblDoanhThu.getColumnModel().getColumn(1).setPreferredWidth(100);
            tblDoanhThu.getColumnModel().getColumn(2).setPreferredWidth(100);
            tblDoanhThu.getColumnModel().getColumn(3).setPreferredWidth(200);
            tblDoanhThu.getColumnModel().getColumn(4).setPreferredWidth(200);
        }

        lblTongDoanhThu.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        lblTongDoanhThu.setText("Tổng doanh thu:");

        btnInTKDoanhThu.setText("In thống kê doanh thu");
        btnInTKDoanhThu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInTKDoanhThuActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlDoanhThuLayout = new javax.swing.GroupLayout(pnlDoanhThu);
        pnlDoanhThu.setLayout(pnlDoanhThuLayout);
        pnlDoanhThuLayout.setHorizontalGroup(
            pnlDoanhThuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDoanhThuLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlDoanhThuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 576, Short.MAX_VALUE)
                    .addGroup(pnlDoanhThuLayout.createSequentialGroup()
                        .addComponent(lblTongDoanhThu)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlDoanhThuLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnInTKDoanhThu)))
                .addContainerGap())
        );
        pnlDoanhThuLayout.setVerticalGroup(
            pnlDoanhThuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDoanhThuLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTongDoanhThu)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 445, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnInTKDoanhThu))
        );

        tabs.addTab("Doanh thu", pnlDoanhThu);

        tblSanPham.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "MaSP", "TenSP", "Soluong"
            }
        ));
        jScrollPane2.setViewportView(tblSanPham);

        btnBanChay.setText("Bán chạy");
        btnBanChay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBanChayActionPerformed(evt);
            }
        });

        btnBanCham.setText("Bán chậm");
        btnBanCham.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBanChamActionPerformed(evt);
            }
        });

        btnInTKSanPham.setText("In thống kê sản phẩm");
        btnInTKSanPham.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInTKSanPhamActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlSanPhamLayout = new javax.swing.GroupLayout(pnlSanPham);
        pnlSanPham.setLayout(pnlSanPhamLayout);
        pnlSanPhamLayout.setHorizontalGroup(
            pnlSanPhamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlSanPhamLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlSanPhamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 576, Short.MAX_VALUE)
                    .addGroup(pnlSanPhamLayout.createSequentialGroup()
                        .addComponent(btnBanChay)
                        .addGap(18, 18, 18)
                        .addComponent(btnBanCham)
                        .addGap(18, 18, 18)
                        .addComponent(btnInTKSanPham)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pnlSanPhamLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnBanCham, btnBanChay});

        pnlSanPhamLayout.setVerticalGroup(
            pnlSanPhamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlSanPhamLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlSanPhamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBanChay)
                    .addComponent(btnBanCham)
                    .addComponent(btnInTKSanPham))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 481, Short.MAX_VALUE))
        );

        tabs.addTab("Sản phẩm", pnlSanPham);

        jPanel1.setLayout(new java.awt.GridLayout(1, 3, 5, 0));

        jLabel2.setText("Ngày:");

        cboNgay.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cboNgay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboNgayActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(cboNgay, 0, 131, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(cboNgay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(10, Short.MAX_VALUE))
        );

        jPanel1.add(jPanel2);

        jLabel3.setText("Tháng:");

        cboThang.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cboThang.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboThangActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cboThang, 0, 131, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(cboThang, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(10, Short.MAX_VALUE))
        );

        jPanel1.add(jPanel3);

        jLabel4.setText("Năm:");

        cboNam.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cboNam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboNamActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(cboNam, 0, 131, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(cboNam, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(10, Short.MAX_VALUE))
        );

        jPanel1.add(jPanel4);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(tabs)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tabs)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cboNgayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboNgayActionPerformed
        // TODO add your handling code here:
        fillTableDoanhThu();
    }//GEN-LAST:event_cboNgayActionPerformed

    private void cboThangActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboThangActionPerformed
        // TODO add your handling code here:
        fillTableDoanhThu();
    }//GEN-LAST:event_cboThangActionPerformed

    private void cboNamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboNamActionPerformed
        // TODO add your handling code here:
        fillTableDoanhThu();
    }//GEN-LAST:event_cboNamActionPerformed

    private void btnBanChayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBanChayActionPerformed
        // TODO add your handling code here:
        fillTableSanPhamBanChay();
    }//GEN-LAST:event_btnBanChayActionPerformed

    private void btnBanChamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBanChamActionPerformed
        // TODO add your handling code here:
        fillTableSanPhamBanCham();
    }//GEN-LAST:event_btnBanChamActionPerformed

    private void btnInTKDoanhThuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInTKDoanhThuActionPerformed
        // TODO add your handling code here:
        inTKDoanhThu();
    }//GEN-LAST:event_btnInTKDoanhThuActionPerformed

    private void btnInTKSanPhamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInTKSanPhamActionPerformed
        // TODO add your handling code here:
        inTKSanPham();
    }//GEN-LAST:event_btnInTKSanPhamActionPerformed

    public void fillComboBoxNam() {
        DefaultComboBoxModel model = (DefaultComboBoxModel) cboNam.getModel();
        model.removeAllElements();

        List<Integer> list = dhDAO.SelectYears();

        model.addElement(0);

        for (Integer year : list) {
            model.addElement(year);
        }
    }

    public void fillComboBoxThang() {
        DefaultComboBoxModel model = (DefaultComboBoxModel) cboThang.getModel();
        model.removeAllElements();

        List<Integer> list = dhDAO.SelectMonths();

        model.addElement(0);

        for (Integer year : list) {
            model.addElement(year);
        }
    }

    public void fillComboBoxNgay() {
        DefaultComboBoxModel model = (DefaultComboBoxModel) cboNgay.getModel();
        model.removeAllElements();

        List<Integer> list = dhDAO.SelectDays();

        model.addElement(0);

        for (Integer year : list) {
            model.addElement(year);
        }
    }

    public void fillTableDoanhThu() {
        DefaultTableModel model = (DefaultTableModel) tblDoanhThu.getModel();
        model.setRowCount(0);

        List<Object[]> list = null;

        try {
            Integer nam = (Integer) cboNam.getSelectedItem();
            Integer thang = (Integer) cboThang.getSelectedItem();
            Integer ngay = (Integer) cboNgay.getSelectedItem();

            if (ngay != 0) {
                model.setColumnIdentifiers(new Object[]{"Ngay", "Thang", "Nam", "SoLuongHoaDon", "DoanhThu"});
                list = tkDAO.getDoanhThuTheoNgay(nam, thang, ngay);
            } else if (thang != 0) {
                model.setColumnIdentifiers(new Object[]{"Ngay", "Thang", "Nam", "SoLuongHoaDon", "DoanhThu"});
                list = tkDAO.getDoanhThuTheoThang(nam, thang);
            } else if (nam != 0) {
                model.setColumnIdentifiers(new Object[]{"Thang", "Nam", "SoLuongHoaDon", "DoanhThu"});
                list = tkDAO.getDoanhThuTheoNam(nam);
            } else {
                model.setColumnIdentifiers(new Object[]{"Ngay", "Thang", "Nam", "SoLuongHoaDon", "DoanhThu"});
                model.setRowCount(0);
            }
        } catch (Exception e) {
            System.out.println(e);
        }

        if (list != null) {
            for (Object[] row : list) {
                model.addRow(row);
            }
        }

        tongDoanhThu();
    }

    public void tongDoanhThu() {
        int tongDoanhThu = 0;

        for (int i = 0; i < tblDoanhThu.getRowCount(); i++) {
            int doanhThu = (int) tblDoanhThu.getValueAt(i, tblDoanhThu.getColumnCount() - 1);

            tongDoanhThu += doanhThu;
        }

        lblTongDoanhThu.setText("Tổng doanh thu: " + tongDoanhThu);
    }

    public void fillTableSanPhamBanChay() {
        DefaultTableModel model = (DefaultTableModel) tblSanPham.getModel();
        model.setRowCount(0);

        List<Object[]> list = null;

        try {
            Integer nam = (Integer) cboNam.getSelectedItem();
            Integer thang = (Integer) cboThang.getSelectedItem();
            Integer ngay = (Integer) cboNgay.getSelectedItem();

            if (ngay != 0) {
                list = tkDAO.getSanPhamBanChayTheoNgay(nam, thang, ngay);
            } else if (thang != 0) {
                list = tkDAO.getSanPhamBanChayTheoThang(nam, thang);
            } else if (nam != 0) {
                list = tkDAO.getSanPhamBanChayTheoNam(nam);
            } else {
                model.setRowCount(0);
            }
        } catch (Exception e) {
            System.out.println(e);
        }

        if (list != null) {
            for (Object[] row : list) {
                model.addRow(row);
            }
        }
    }

    public void fillTableSanPhamBanCham() {
        DefaultTableModel model = (DefaultTableModel) tblSanPham.getModel();
        model.setRowCount(0);

        List<Object[]> list = null;

        try {
            Integer nam = (Integer) cboNam.getSelectedItem();
            Integer thang = (Integer) cboThang.getSelectedItem();
            Integer ngay = (Integer) cboNgay.getSelectedItem();

            if (ngay != 0) {
                list = tkDAO.getSanPhamBanChamTheoNgay(nam, thang, ngay);
            } else if (thang != 0) {
                list = tkDAO.getSanPhamBanChamTheoThang(nam, thang);
            } else if (nam != 0) {
                list = tkDAO.getSanPhamBanChamTheoNam(nam);
            } else {
                model.setRowCount(0);
            }
        } catch (Exception e) {
            System.out.println(e);
        }

        if (list != null) {
            for (Object[] row : list) {
                model.addRow(row);
            }
        }
    }

    public void inTKDoanhThu() {
        try {
            File file = new File("report\\ThongKeDoanhThu.xlsx");

            XSSFWorkbook workbook;

            if (file.createNewFile() == true) {
                workbook = new XSSFWorkbook();
            } else {
                FileInputStream fis = new FileInputStream(file);
                workbook = new XSSFWorkbook(fis);
            }

            List<Object[]> list = null;

            try {
                Integer nam = (Integer) cboNam.getSelectedItem();
                Integer thang = (Integer) cboThang.getSelectedItem();
                Integer ngay = (Integer) cboNgay.getSelectedItem();

                String sheetName = "";
                if (ngay != 0) {
                    list = tkDAO.getDoanhThuTheoNgay(nam, thang, ngay);
                    sheetName += "ngày " + ngay + " tháng " + thang + " năm " + nam;
                } else if (thang != 0) {
                    list = tkDAO.getDoanhThuTheoThang(nam, thang);
                    sheetName += "tháng " + thang + " năm " + nam;
                } else if (nam != 0) {
                    list = tkDAO.getDoanhThuTheoNam(nam);
                    sheetName += nam;
                }

                XSSFSheet sheet = workbook.getSheet(sheetName);

                if (sheet == null) {
                    sheet = workbook.createSheet(sheetName);
                }

                XSSFRow row;
                Cell cell;

                // Tạo Font chữ cho tiêu đề
                XSSFFont headerFont = workbook.createFont();
                headerFont.setBold(true);
                headerFont.setFontHeightInPoints((short) 14);
                headerFont.setColor(IndexedColors.RED.getIndex());

                XSSFCellStyle headerCellStyle = workbook.createCellStyle();
                headerCellStyle.setFont(headerFont);
                headerCellStyle.setAlignment(HorizontalAlignment.CENTER);
                // Chọn màu nền là màu vàng
                headerCellStyle.setFillForegroundColor(IndexedColors.YELLOW.getIndex());
                headerCellStyle.setFillPattern(FillPatternType.SOLID_FOREGROUND);

                // Tạo viền cho từng ô cell
                headerCellStyle.setBorderTop(BorderStyle.THIN); // Viền phía trên
                headerCellStyle.setBorderBottom(BorderStyle.THIN); // Viền phía dưới
                headerCellStyle.setBorderLeft(BorderStyle.THIN); // Viền bên trái
                headerCellStyle.setBorderRight(BorderStyle.THIN); // Viền bên phải

                // Tạo kiểu định dạng cho cell
                XSSFCellStyle cellStyle = workbook.createCellStyle();
                cellStyle.setAlignment(HorizontalAlignment.CENTER);
                cellStyle.setBorderTop(BorderStyle.THIN); // Viền phía trên
                cellStyle.setBorderBottom(BorderStyle.THIN); // Viền phía dưới
                cellStyle.setBorderLeft(BorderStyle.THIN); // Viền bên trái
                cellStyle.setBorderRight(BorderStyle.THIN); // Viền bên phải

                // Tạo tiêu đề tại hàng đầu tiên
                row = sheet.createRow(0);
                cell = row.createCell(0);
                cell.setCellStyle(headerCellStyle);
                sheet.autoSizeColumn(0);
                cell.setCellValue("Thống kê doanh thu " + sheetName);

                // Đặt tiêu đề cho các cột tại hàng thứ 2
                row = sheet.createRow(1);

                cell = row.createCell(0);
                cell.setCellStyle(headerCellStyle);
                sheet.autoSizeColumn(0);
                cell.setCellValue("Ngay");

                cell = row.createCell(1);
                cell.setCellStyle(headerCellStyle);
                sheet.autoSizeColumn(1);
                cell.setCellValue("SoLuongHoaDon");

                cell = row.createCell(2);
                cell.setCellStyle(headerCellStyle);
                sheet.autoSizeColumn(2);
                cell.setCellValue("DoanhThu");

                if (ngay == 0 && thang == 0) {
                    for (int i = 0; i < list.size(); i++) {
                        row = sheet.createRow(2 + i);
                        
                        String ngayThangNam = list.get(i)[0] + "/" + list.get(i)[1];

                        Double soLuongHoaDon = Double.valueOf(list.get(i)[2].toString());
                        Double doanhThu = Double.valueOf(list.get(i)[3].toString());

                        cell = row.createCell(0);
                        cell.setCellStyle(cellStyle);
                        sheet.autoSizeColumn(0);
                        cell.setCellValue(ngayThangNam);

                        cell = row.createCell(1);
                        cell.setCellStyle(cellStyle);
                        sheet.autoSizeColumn(1);
                        cell.setCellValue(soLuongHoaDon);

                        cell = row.createCell(2);
                        cell.setCellStyle(cellStyle);
                        sheet.autoSizeColumn(2);
                        cell.setCellValue(doanhThu);
                    }
                } else {
                    for (int i = 0; i < list.size(); i++) {
                        row = sheet.createRow(2 + i);
                        
                        String ngayThangNam = list.get(i)[0] + "/" + list.get(i)[1] + "/" + list.get(i)[2];

                        Double soLuongHoaDon = Double.valueOf(list.get(i)[3].toString());
                        Double doanhThu = Double.valueOf(list.get(i)[4].toString());

                        cell = row.createCell(0);
                        cell.setCellStyle(cellStyle);
                        sheet.autoSizeColumn(0);
                        cell.setCellValue(ngayThangNam);

                        cell = row.createCell(1);
                        cell.setCellStyle(cellStyle);
                        sheet.autoSizeColumn(1);
                        cell.setCellValue(soLuongHoaDon);

                        cell = row.createCell(2);
                        cell.setCellStyle(cellStyle);
                        sheet.autoSizeColumn(2);
                        cell.setCellValue(doanhThu);
                    }
                }
            } catch (Exception e) {
                System.out.println(e);
            }

            try {
                FileOutputStream fos = new FileOutputStream(file);
                workbook.write(fos);
                fos.close();
            } catch (IOException e) {
                System.out.println(e);
            }

            MsgBox.alert(this, "In file Excel thành công!");

        } catch (Exception e) {
            System.out.println(e);
        }
    }

    public void inTKSanPham() {
        try {
            File file = new File("report\\ThongKeSanPham.xlsx");

            XSSFWorkbook workbook;

            if (file.createNewFile() == true) {
                workbook = new XSSFWorkbook();
            } else {
                FileInputStream fis = new FileInputStream(file);
                workbook = new XSSFWorkbook(fis);
            }

            List<Object[]> list = null;

            try {
                Integer nam = (Integer) cboNam.getSelectedItem();
                Integer thang = (Integer) cboThang.getSelectedItem();
                Integer ngay = (Integer) cboNgay.getSelectedItem();

                String sheetName = "";
                if (ngay != 0) {
                    list = tkDAO.getSanPhamBanChayTheoNgay(nam, thang, ngay);
                    sheetName += "ngày " + ngay + " tháng " + thang + " năm " + nam;
                } else if (thang != 0) {
                    list = tkDAO.getSanPhamBanChayTheoThang(nam, thang);
                    sheetName += "tháng " + thang + " năm " + nam;
                } else if (nam != 0) {
                    list = tkDAO.getSanPhamBanChayTheoNam(nam);
                    sheetName += nam;
                }

                XSSFSheet sheet = workbook.getSheet(sheetName);

                if (sheet == null) {
                    sheet = workbook.createSheet(sheetName);
                }

                XSSFRow row;
                Cell cell;

                // Tạo Font chữ cho tiêu đề
                XSSFFont headerFont = workbook.createFont();
                headerFont.setBold(true);
                headerFont.setFontHeightInPoints((short) 14);
                headerFont.setColor(IndexedColors.RED.getIndex());

                XSSFCellStyle headerCellStyle = workbook.createCellStyle();
                headerCellStyle.setFont(headerFont);
                headerCellStyle.setAlignment(HorizontalAlignment.CENTER);
                // Chọn màu nền là màu vàng
                headerCellStyle.setFillForegroundColor(IndexedColors.YELLOW.getIndex());
                headerCellStyle.setFillPattern(FillPatternType.SOLID_FOREGROUND);

                // Tạo viền cho từng ô cell
                headerCellStyle.setBorderTop(BorderStyle.THIN); // Viền phía trên
                headerCellStyle.setBorderBottom(BorderStyle.THIN); // Viền phía dưới
                headerCellStyle.setBorderLeft(BorderStyle.THIN); // Viền bên trái
                headerCellStyle.setBorderRight(BorderStyle.THIN); // Viền bên phải

                // Tạo kiểu định dạng cho cell
                XSSFCellStyle cellStyle = workbook.createCellStyle();
                cellStyle.setAlignment(HorizontalAlignment.CENTER);
                cellStyle.setBorderTop(BorderStyle.THIN); // Viền phía trên
                cellStyle.setBorderBottom(BorderStyle.THIN); // Viền phía dưới
                cellStyle.setBorderLeft(BorderStyle.THIN); // Viền bên trái
                cellStyle.setBorderRight(BorderStyle.THIN); // Viền bên phải

                // Tạo tiêu đề tại hàng đầu tiên
                row = sheet.createRow(0);
                
                cell = row.createCell(0);
                cell.setCellStyle(headerCellStyle);
                sheet.autoSizeColumn(0);
                cell.setCellValue("Thống kê sản phẩm " + sheetName);

                // Đặt tiêu đề cho các cột tại hàng thứ 2
                row = sheet.createRow(1);

                cell = row.createCell(0);
                cell.setCellStyle(headerCellStyle);
                sheet.autoSizeColumn(0);
                cell.setCellValue("MaSP");

                cell = row.createCell(1);
                cell.setCellStyle(headerCellStyle);
                sheet.autoSizeColumn(1);
                cell.setCellValue("TenSP");

                cell = row.createCell(2);
                cell.setCellStyle(headerCellStyle);
                sheet.autoSizeColumn(2);
                cell.setCellValue("SoLuong");

                for (int i = 0; i < list.size(); i++) {
                    row = sheet.createRow(2 + i);

                    String maSP = (String) list.get(i)[0];

                    String tenSP = (String) list.get(i)[1];
                    
                    Double soLuong;
                    
                    if (list.get(i)[2] != null) {
                        soLuong = Double.valueOf(list.get(i)[2].toString());

                    } else {
                        soLuong = 0d;
                    }
                    
                    cell = row.createCell(0);
                    cell.setCellStyle(cellStyle);
                    sheet.autoSizeColumn(0);
                    cell.setCellValue(maSP);

                    cell = row.createCell(1);
                    cell.setCellStyle(cellStyle);
                    sheet.autoSizeColumn(1);
                    cell.setCellValue(tenSP);

                    cell = row.createCell(2);
                    cell.setCellStyle(cellStyle);
                    sheet.autoSizeColumn(2);
                    cell.setCellValue(soLuong);
                }
            } catch (Exception e) {
                System.out.println(e);
            }

            try {
                FileOutputStream fos = new FileOutputStream(file);
                workbook.write(fos);
                fos.close();
            } catch (IOException e) {
                System.out.println(e);
            }

            MsgBox.alert(this, "In file Excel thành công!");

        } catch (Exception e) {
            System.out.println(e);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ThongKeJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ThongKeJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ThongKeJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ThongKeJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ThongKeJDialog dialog = new ThongKeJDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBanCham;
    private javax.swing.JButton btnBanChay;
    private javax.swing.JButton btnInTKDoanhThu;
    private javax.swing.JButton btnInTKSanPham;
    private javax.swing.JComboBox<String> cboNam;
    private javax.swing.JComboBox<String> cboNgay;
    private javax.swing.JComboBox<String> cboThang;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblTongDoanhThu;
    private javax.swing.JPanel pnlDoanhThu;
    private javax.swing.JPanel pnlSanPham;
    private javax.swing.JTabbedPane tabs;
    private javax.swing.JTable tblDoanhThu;
    private javax.swing.JTable tblSanPham;
    // End of variables declaration//GEN-END:variables
}
