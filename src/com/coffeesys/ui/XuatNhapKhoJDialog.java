/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package com.coffeesys.ui;

import com.coffeesys.dao.ChiTietPhieuNhapXuatDAO;
import com.coffeesys.dao.NguyenLieuDAO;
import com.coffeesys.dao.PhieuNhapXuatDAO;
import com.coffeesys.entity.ChiTietPhieuNhapXuat;
import com.coffeesys.entity.NguyenLieu;
import com.coffeesys.entity.PhieuNhapXuat;
import com.coffeesys.utils.Auth;
import com.coffeesys.utils.MsgBox;
import com.coffeesys.utils.XDate;
import com.coffeesys.utils.XImage;
import java.sql.Timestamp;
import java.util.Date;
import java.util.List;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Admin
 */
public class XuatNhapKhoJDialog extends javax.swing.JDialog {

    NguyenLieuDAO nlDAO = new NguyenLieuDAO();
    PhieuNhapXuatDAO pnxDAO = new PhieuNhapXuatDAO();
    ChiTietPhieuNhapXuatDAO ctpnxDAO = new ChiTietPhieuNhapXuatDAO();

    PhieuNhapXuat pnx = null;

    String pattern = "yyyy-MM-dd hh:mm:ss";
    
    String announcement = "";

    /**
     * Creates new form XuatNhapKhoJDialog
     */
    public XuatNhapKhoJDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        init();
    }

    public void init() {
        setIconImage(XImage.getAppIcon());
        setLocationRelativeTo(null);
        setTitle("QUẢN LÝ XUẤT NHẬP KHO");

        fillTableNguyenLieu();
        fillTablePhieuNhapXuat();

        updateStatus();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgrTrangThai = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        pnlQuanLyXuatNhapKho = new javax.swing.JPanel();
        pnlNguyenLieu = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblNguyenLieu = new javax.swing.JTable();
        pnlXuatNhapKho = new javax.swing.JPanel();
        pnlThongTin = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtMaPNX = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtNgayTao = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtNhanVien = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        rdoNhap = new javax.swing.JRadioButton();
        rdoXuat = new javax.swing.JRadioButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        txtMaNL = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtTenNL = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtDonViTinh = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtSoLuong = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        btnTaoMoi = new javax.swing.JButton();
        btnThem = new javax.swing.JButton();
        btnCapNhat = new javax.swing.JButton();
        btnXoa = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblChiTietPNX = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        btnLuu = new javax.swing.JButton();
        btnHuy = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblPhieuNhapXuat = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("QUẢN LÝ XUẤT NHẬP KHO");

        pnlQuanLyXuatNhapKho.setLayout(new java.awt.GridLayout(1, 2, 5, 0));

        pnlNguyenLieu.setBorder(javax.swing.BorderFactory.createTitledBorder("Nguyên liệu"));

        tblNguyenLieu.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "MaNL", "TenNL", "DonGia", "DonViTinh", "SoLuong"
            }
        ));
        tblNguyenLieu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblNguyenLieuMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblNguyenLieu);

        javax.swing.GroupLayout pnlNguyenLieuLayout = new javax.swing.GroupLayout(pnlNguyenLieu);
        pnlNguyenLieu.setLayout(pnlNguyenLieuLayout);
        pnlNguyenLieuLayout.setHorizontalGroup(
            pnlNguyenLieuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlNguyenLieuLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 475, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnlNguyenLieuLayout.setVerticalGroup(
            pnlNguyenLieuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlNguyenLieuLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 615, Short.MAX_VALUE)
                .addContainerGap())
        );

        pnlQuanLyXuatNhapKho.add(pnlNguyenLieu);

        pnlXuatNhapKho.setBorder(javax.swing.BorderFactory.createTitledBorder("Xuất nhập kho"));

        pnlThongTin.setLayout(new java.awt.GridLayout(1, 2, 5, 0));

        jLabel2.setText("Mã PNX:");

        txtMaPNX.setEditable(false);

        jLabel3.setText("Ngày tạo:");

        txtNgayTao.setEditable(false);

        jLabel4.setText("Nhân viên:");

        txtNhanVien.setEditable(false);

        jLabel9.setText("Trạng thái:");

        bgrTrangThai.add(rdoNhap);
        rdoNhap.setSelected(true);
        rdoNhap.setText("Nhập");

        bgrTrangThai.add(rdoXuat);
        rdoXuat.setText("Xuất");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel2)
                    .addComponent(jLabel9))
                .addGap(24, 24, 24)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtMaPNX)
                    .addComponent(txtNhanVien)
                    .addComponent(txtNgayTao)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(rdoNhap)
                        .addGap(18, 18, 18)
                        .addComponent(rdoXuat)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtMaPNX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtNgayTao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtNhanVien, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(rdoNhap)
                    .addComponent(rdoXuat))
                .addContainerGap(7, Short.MAX_VALUE))
        );

        pnlThongTin.add(jPanel2);

        jLabel5.setText("Mã NL:");

        txtMaNL.setEditable(false);

        jLabel6.setText("Tên NL:");

        txtTenNL.setEditable(false);

        jLabel7.setText("Đơn vị tính:");

        txtDonViTinh.setEditable(false);

        jLabel8.setText("Số lượng:");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7)
                    .addComponent(jLabel5)
                    .addComponent(jLabel8))
                .addGap(24, 24, 24)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtMaNL, javax.swing.GroupLayout.DEFAULT_SIZE, 144, Short.MAX_VALUE)
                    .addComponent(txtDonViTinh)
                    .addComponent(txtTenNL)
                    .addComponent(txtSoLuong))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtMaNL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtTenNL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(txtDonViTinh, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(txtSoLuong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlThongTin.add(jPanel3);

        jPanel1.setLayout(new java.awt.GridLayout(1, 4, 5, 0));

        btnTaoMoi.setText("Tạo mới");
        btnTaoMoi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTaoMoiActionPerformed(evt);
            }
        });
        jPanel1.add(btnTaoMoi);

        btnThem.setText("Thêm");
        btnThem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThemActionPerformed(evt);
            }
        });
        jPanel1.add(btnThem);

        btnCapNhat.setText("Cập nhật");
        btnCapNhat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCapNhatActionPerformed(evt);
            }
        });
        jPanel1.add(btnCapNhat);

        btnXoa.setText("Xóa");
        btnXoa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXoaActionPerformed(evt);
            }
        });
        jPanel1.add(btnXoa);

        tblChiTietPNX.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "MaNL", "TenNL", "DonViTinh", "SoLuong"
            }
        ));
        tblChiTietPNX.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblChiTietPNXMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblChiTietPNX);

        jPanel4.setLayout(new java.awt.GridLayout(1, 2, 5, 0));

        btnLuu.setText("Lưu");
        btnLuu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLuuActionPerformed(evt);
            }
        });
        jPanel4.add(btnLuu);

        btnHuy.setText("Hủy");
        btnHuy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHuyActionPerformed(evt);
            }
        });
        jPanel4.add(btnHuy);

        tblPhieuNhapXuat.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "MaPNX", "NhanVien", "TrangThai", "NgayTao"
            }
        ));
        tblPhieuNhapXuat.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblPhieuNhapXuatMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tblPhieuNhapXuat);

        javax.swing.GroupLayout pnlXuatNhapKhoLayout = new javax.swing.GroupLayout(pnlXuatNhapKho);
        pnlXuatNhapKho.setLayout(pnlXuatNhapKhoLayout);
        pnlXuatNhapKhoLayout.setHorizontalGroup(
            pnlXuatNhapKhoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlThongTin, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(pnlXuatNhapKhoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlXuatNhapKhoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );
        pnlXuatNhapKhoLayout.setVerticalGroup(
            pnlXuatNhapKhoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlXuatNhapKhoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlThongTin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 259, Short.MAX_VALUE)
                .addContainerGap())
        );

        pnlQuanLyXuatNhapKho.add(pnlXuatNhapKho);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(pnlQuanLyXuatNhapKho, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlQuanLyXuatNhapKho, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tblNguyenLieuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblNguyenLieuMouseClicked
        // TODO add your handling code here:
        int index = tblNguyenLieu.rowAtPoint(evt.getPoint());
        selectNguyenLieu(index);
    }//GEN-LAST:event_tblNguyenLieuMouseClicked

    private void btnTaoMoiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTaoMoiActionPerformed
        // TODO add your handling code here:
        createPNX();
    }//GEN-LAST:event_btnTaoMoiActionPerformed

    private void btnThemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThemActionPerformed
        // TODO add your handling code here:
        addNguyenLieu();
    }//GEN-LAST:event_btnThemActionPerformed

    private void tblChiTietPNXMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblChiTietPNXMouseClicked
        // TODO add your handling code here:
        int index = tblChiTietPNX.rowAtPoint(evt.getPoint());
        selectChiTietPNX(index);
    }//GEN-LAST:event_tblChiTietPNXMouseClicked

    private void btnCapNhatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCapNhatActionPerformed
        // TODO add your handling code here:
        updateNguyenLieu();
    }//GEN-LAST:event_btnCapNhatActionPerformed

    private void btnXoaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXoaActionPerformed
        // TODO add your handling code here:
        removeNguyenLieu();
    }//GEN-LAST:event_btnXoaActionPerformed

    private void btnLuuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLuuActionPerformed
        // TODO add your handling code here:
        savePNX();
    }//GEN-LAST:event_btnLuuActionPerformed

    private void btnHuyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHuyActionPerformed
        // TODO add your handling code here:
        cancelPNX();
    }//GEN-LAST:event_btnHuyActionPerformed

    private void tblPhieuNhapXuatMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblPhieuNhapXuatMouseClicked
        // TODO add your handling code here:
        if (tblPhieuNhapXuat.getRowSelectionAllowed() == true) {
            int index = tblPhieuNhapXuat.rowAtPoint(evt.getPoint());
            selectPNX(index);
        }
    }//GEN-LAST:event_tblPhieuNhapXuatMouseClicked

    public void fillTableNguyenLieu() {
        DefaultTableModel model = (DefaultTableModel) tblNguyenLieu.getModel();
        model.setRowCount(0);

        try {
            List<NguyenLieu> list = nlDAO.selectAll();

            for (NguyenLieu item : list) {
                Object[] rows = {
                    item.getMaNL(),
                    item.getTenNL(),
                    item.getDonGia(),
                    item.getDonViTinh(),
                    item.getSoLuong()
                };

                model.addRow(rows);
            }
        } catch (Exception e) {
            System.out.println(e);
            MsgBox.alert(this, "Lỗi truy vấn dữ liệu!");
        }
    }

    public void selectNguyenLieu(int index) {
        try {
            int maNL = (int) tblNguyenLieu.getValueAt(index, 0);
            NguyenLieu nl = nlDAO.selectById(maNL);

            if (nl != null) {
                txtMaNL.setText(String.valueOf(nl.getMaNL()));
                txtTenNL.setText(nl.getTenNL());
                txtDonViTinh.setText(nl.getDonViTinh());
                txtSoLuong.setText("1");
            }
        } catch (Exception e) {
            System.out.println(e);
            MsgBox.alert(this, "Lỗi truy vấn dữ liệu");
        }
    }

    public void updateStatus() {
        boolean create = pnx == null;

        btnTaoMoi.setEnabled(create);
        btnThem.setEnabled(!create);
        btnCapNhat.setEnabled(!create);
        btnXoa.setEnabled(!create);

        btnLuu.setEnabled(!create);
        btnHuy.setEnabled(!create);
    }

    public void createPNX() {
        clearForm();

        tblPhieuNhapXuat.setRowSelectionAllowed(false);

        Timestamp timestamp = new Timestamp(System.currentTimeMillis());
        long maPNX = timestamp.getTime();

        String maNV = Auth.user.getMaNV();
        Date ngayTao = new Date();

        boolean trangThai = true;
        if (!rdoNhap.isSelected()) {
            trangThai = false;
        }

        pnx = new PhieuNhapXuat();
        pnx.setMaPNX(maPNX);
        pnx.setMaNV(maNV);
        pnx.setNgayNX(ngayTao);
        pnx.setTrangThai(trangThai);

        try {
            pnxDAO.insert(pnx);

            txtMaPNX.setText(String.valueOf(pnx.getMaPNX()));
            txtNgayTao.setText(XDate.toString(ngayTao, pattern));
            txtNhanVien.setText(pnx.getMaNV());

            if (pnx.isTrangThai()) {
                rdoNhap.setSelected(true);
            } else {
                rdoXuat.setSelected(true);
            }

            updateStatus();
        } catch (Exception e) {
            System.out.println(e);
            MsgBox.alert(this, "Lỗi truy vấn dữ liệu");
        }
    }

    public void fillTableChiTietPNX() {
        DefaultTableModel model = (DefaultTableModel) tblChiTietPNX.getModel();
        model.setRowCount(0);

        if (pnx == null) {
            model.setRowCount(0);
            return;
        }

        try {
            List<ChiTietPhieuNhapXuat> list = ctpnxDAO.selectByMaPNX(pnx.getMaPNX());

            for (ChiTietPhieuNhapXuat item : list) {
                NguyenLieu nl = nlDAO.selectById(item.getMaNL());

                Object[] rows = {
                    nl.getMaNL(),
                    nl.getTenNL(),
                    nl.getDonViTinh(),
                    item.getSoLuong()
                };

                model.addRow(rows);
            }
        } catch (Exception e) {
        }
    }

    public void addNguyenLieu() {
        if (pnx == null) {
            MsgBox.alert(this, "Bạn chưa tạo phiếu nhập xuất mới!");
            return;
        }

        long maPNX = pnx.getMaPNX();

        int maNL = 0;
        try {
            maNL = Integer.parseInt(txtMaNL.getText());
        } catch (NumberFormatException e) {
            MsgBox.alert(this, "Vui lòng chọn nguyên liệu!");
            return;
        }

        int soLuong;

        try {
            soLuong = Integer.parseInt(txtSoLuong.getText());
            if (soLuong < 1) {
                throw new Exception();
            }
        } catch (Exception e) {
            System.out.println(e);
            MsgBox.alert(this, "Số lượng phải là số > 0");
            return;
        }

        ChiTietPhieuNhapXuat ctpnx = new ChiTietPhieuNhapXuat(maPNX, maNL, soLuong, "");
        boolean check = false;

        try {
            List<ChiTietPhieuNhapXuat> list = ctpnxDAO.selectByMaPNX(maPNX);

            for (ChiTietPhieuNhapXuat item : list) {
                if (item.getMaNL() == maNL) {
                    soLuong = soLuong + item.getSoLuong();
                    item.setSoLuong(soLuong);
                    ctpnxDAO.update(item);
                    check = true;
                    break;
                }
            }

            if (check == false) {
                ctpnxDAO.insert(ctpnx);
            }

            fillTableChiTietPNX();
        } catch (Exception e) {
            System.out.println(e);
            MsgBox.alert(this, "Lỗi truy vấn dữ liệu");
        }
    }

    public void removeNguyenLieu() {
        if (pnx == null) {
            MsgBox.alert(this, "Bạn chưa tạo phiếu nhập xuất mới!");
            return;
        }

        long maPNX = pnx.getMaPNX();

        int maNL = 0;
        try {
            int index = tblChiTietPNX.getSelectedRow();
            String maNLString = tblChiTietPNX.getValueAt(index, 0).toString();
            maNL = Integer.parseInt(maNLString);
        } catch (Exception e) {
            System.out.println(e);
            MsgBox.alert(this, "Vui lòng chọn nguyên liệu!");
            return;
        }

        try {
            List<ChiTietPhieuNhapXuat> list = ctpnxDAO.selectByMaPNX(maPNX);

            for (ChiTietPhieuNhapXuat item : list) {
                if (item.getMaNL() == maNL) {
                    ctpnxDAO.delete(item.getMaCTPNX());
                    break;
                }
            }

            fillTableChiTietPNX();
        } catch (Exception e) {
            System.out.println(e);
            MsgBox.alert(this, "Lỗi truy vấn dữ liệu");
        }
    }

    public void updateNguyenLieu() {
        if (pnx == null) {
            MsgBox.alert(this, "Bạn chưa tạo phiếu nhập xuất mới!");
            return;
        }

        long maPNX = pnx.getMaPNX();

        int maNL = 0;
        try {
            int index = tblChiTietPNX.getSelectedRow();
            String maNLString = tblChiTietPNX.getValueAt(index, 0).toString();
            maNL = Integer.parseInt(maNLString);
        } catch (Exception e) {
            System.out.println(e);
            MsgBox.alert(this, "Vui lòng chọn nguyên liệu!");
            return;
        }

        int soLuong;

        try {
            soLuong = Integer.parseInt(txtSoLuong.getText());
            if (soLuong < 1) {
                throw new Exception();
            }
        } catch (Exception e) {
            System.out.println(e);
            MsgBox.alert(this, "Số lượng phải là số > 0");
            return;
        }

        try {
            List<ChiTietPhieuNhapXuat> list = ctpnxDAO.selectByMaPNX(maPNX);

            for (ChiTietPhieuNhapXuat item : list) {
                if (item.getMaNL() == maNL) {
                    item.setSoLuong(soLuong);
                    ctpnxDAO.update(item);
                    break;
                }
            }

            fillTableChiTietPNX();
        } catch (Exception e) {
            System.out.println(e);
            MsgBox.alert(this, "Lỗi truy vấn dữ liệu");
        }
    }

    public void selectChiTietPNX(int index) {
        if (pnx == null) {
            MsgBox.alert(this, "Bạn chưa tạo phiếu nhập xuất mới!");
            return;
        }

        long maPNX = pnx.getMaPNX();

        int maNL = 0;
        try {
            String maNLString = tblChiTietPNX.getValueAt(index, 0).toString();
            maNL = Integer.parseInt(maNLString);
        } catch (Exception e) {
            System.out.println(e);
            MsgBox.alert(this, "Vui lòng chọn nguyên liệu!");
            return;
        }

        try {
            List<ChiTietPhieuNhapXuat> list = ctpnxDAO.selectByMaPNX(maPNX);

            NguyenLieu nl = nlDAO.selectById(maNL);

            for (ChiTietPhieuNhapXuat item : list) {
                if (item.getMaNL() == maNL) {
                    txtMaNL.setText(String.valueOf(nl.getMaNL()));
                    txtTenNL.setText(nl.getTenNL());
                    txtDonViTinh.setText(nl.getDonViTinh());
                    txtSoLuong.setText(String.valueOf(item.getSoLuong()));
                }
            }
        } catch (Exception e) {
            System.out.println(e);
            MsgBox.alert(this, "Lỗi truy vấn dữ liệu");
        }
    }

    public void fillTablePhieuNhapXuat() {
        DefaultTableModel model = (DefaultTableModel) tblPhieuNhapXuat.getModel();
        model.setRowCount(0);

        try {
            List<PhieuNhapXuat> list = pnxDAO.selectAll();

            for (PhieuNhapXuat item : list) {
                Object[] rows = {
                    item.getMaPNX(),
                    item.getMaNV(),
                    item.isTrangThai() ? "Nhập" : "Xuất",
                    item.getNgayNX()
                };

                model.addRow(rows);
            }
        } catch (Exception e) {
            System.out.println(e);
            MsgBox.alert(this, "Lỗi truy vấn dữ liệu!");
        }
    }

    public void savePNX() {
        if (pnx == null) {
            MsgBox.alert(this, "Bạn chưa tạo phiếu nhập xuất mới!");
            return;
        }

        long maPNX = pnx.getMaPNX();

        if (ctpnxDAO.selectByMaPNX(maPNX).isEmpty()) {
            MsgBox.alert(this, "Phiếu nhập xuất không có nguyên liệu");
            return;
        }

        if (rdoNhap.isSelected()) {
            pnx.setTrangThai(true);
        } else {
            pnx.setTrangThai(false);
        }

        List<ChiTietPhieuNhapXuat> listCTPNX = ctpnxDAO.selectByMaPNX(maPNX);

        if (pnx.isTrangThai()) {
            try {
                for (ChiTietPhieuNhapXuat item : listCTPNX) {
                    NguyenLieu nl = nlDAO.selectById(item.getMaNL());

                    int soLuongNhap = item.getSoLuong();
                    int soLuongTrongKho = nl.getSoLuong();
                    int soLuong = soLuongNhap + soLuongTrongKho;

                    nl.setSoLuong(soLuong);
                    nlDAO.update(nl);
                }

                pnxDAO.update(pnx);
                MsgBox.alert(this, "Nhập nguyên liệu thành công!");

                clearForm();

                fillTableNguyenLieu();
                fillTablePhieuNhapXuat();
            } catch (Exception e) {
                System.out.println(e);
                MsgBox.alert(this, "Lỗi truy vấn dữ liệu!");
            }
        } else {
            try {
                for (ChiTietPhieuNhapXuat item : listCTPNX) {
                    NguyenLieu nl = nlDAO.selectById(item.getMaNL());

                    int soLuongXuat = item.getSoLuong();
                    int soLuongTrongKho = nl.getSoLuong();

                    if (soLuongXuat > soLuongTrongKho) {
                        MsgBox.alert(this, "Số lượng " + nl.getTenNL() + " chỉ còn " + nl.getSoLuong() + " " + nl.getDonViTinh() + "\nVui lòng kiểm tra lại số lượng xuất!");
                        return;
                    }

                    int soLuong = soLuongTrongKho - soLuongXuat;

                    nl.setSoLuong(soLuong);
                    nlDAO.update(nl);
                }

                pnxDAO.update(pnx);
                MsgBox.alert(this, "Xuất nguyên liệu thành công!");

                clearForm();

                fillTableNguyenLieu();
                fillTablePhieuNhapXuat();
                
                
                //Báo cáo số lượng trong kho còn ít hơn 20
                announcement = outOfIngredients();
                if (announcement.length() > 0) {
                    MsgBox.alert(this, "Các nguyên liệu sắp hết\n" + announcement);
                    announcement = "";
                }
            } catch (Exception e) {
                System.out.println(e);
                MsgBox.alert(this, "Lỗi truy vấn dữ liệu!");
            }
        }
    }
    
    //Báo cáo số lượng trong kho còn ít hơn 20
    public String outOfIngredients() {
        String announcement = "";
        for (NguyenLieu nl : nlDAO.selectAll()) 
            if (nl.getSoLuong() < 20) 
                announcement += nl.getTenNL() + " (còn " + nl.getSoLuong() + ")\n";
        return announcement;
    }

    public void cancelPNX() {
        if (pnx == null) {
            MsgBox.alert(this, "Bạn chưa tạo phiếu nhập xuất mới!");
            return;
        }

        long maPNX = pnx.getMaPNX();

        try {
            pnxDAO.delete(maPNX);
        } catch (Exception e) {
            System.out.println(e);
            MsgBox.alert(this, "Lỗi truy vấn dữ liệu");
        }

        clearForm();
        fillTablePhieuNhapXuat();
    }

    public void selectPNX(int index) {
        try {
            Long maPNX = (Long) tblPhieuNhapXuat.getValueAt(index, 0);
            pnx = pnxDAO.selectById(maPNX);
            fillTableChiTietPNX();
            fillThongTinPNX();
        } catch (Exception e) {
            System.out.println(e);
            MsgBox.alert(this, "Lỗi truy vấn dữ liệu");
        }
    }

    public void fillThongTinPNX() {
        txtMaPNX.setText(String.valueOf(pnx.getMaPNX()));
        txtNgayTao.setText(XDate.toString(pnx.getNgayNX(), pattern));
        txtNhanVien.setText(pnx.getMaNV());

        if (pnx.isTrangThai()) {
            rdoNhap.setSelected(true);
        } else {
            rdoXuat.setSelected(true);
        }
    }

    public void clearForm() {
        pnx = null;

        tblNguyenLieu.clearSelection();
        tblPhieuNhapXuat.clearSelection();
        tblChiTietPNX.clearSelection();

        fillTableChiTietPNX();

        txtMaPNX.setText("");
        txtNgayTao.setText("");
        txtNhanVien.setText("");
        rdoNhap.setSelected(true);

        txtMaNL.setText("");
        txtTenNL.setText("");
        txtDonViTinh.setText("");
        txtSoLuong.setText("");

        tblPhieuNhapXuat.setRowSelectionAllowed(true);

        updateStatus();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(XuatNhapKhoJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(XuatNhapKhoJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(XuatNhapKhoJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(XuatNhapKhoJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                XuatNhapKhoJDialog dialog = new XuatNhapKhoJDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgrTrangThai;
    private javax.swing.JButton btnCapNhat;
    private javax.swing.JButton btnHuy;
    private javax.swing.JButton btnLuu;
    private javax.swing.JButton btnTaoMoi;
    private javax.swing.JButton btnThem;
    private javax.swing.JButton btnXoa;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JPanel pnlNguyenLieu;
    private javax.swing.JPanel pnlQuanLyXuatNhapKho;
    private javax.swing.JPanel pnlThongTin;
    private javax.swing.JPanel pnlXuatNhapKho;
    private javax.swing.JRadioButton rdoNhap;
    private javax.swing.JRadioButton rdoXuat;
    private javax.swing.JTable tblChiTietPNX;
    private javax.swing.JTable tblNguyenLieu;
    private javax.swing.JTable tblPhieuNhapXuat;
    private javax.swing.JTextField txtDonViTinh;
    private javax.swing.JTextField txtMaNL;
    private javax.swing.JTextField txtMaPNX;
    private javax.swing.JTextField txtNgayTao;
    private javax.swing.JTextField txtNhanVien;
    private javax.swing.JTextField txtSoLuong;
    private javax.swing.JTextField txtTenNL;
    // End of variables declaration//GEN-END:variables
}
